{"pageProps":{"post":{"title":"Optimizing React: Part 1 - Understanding Renders","date":"2022-09-08T20:00:00.000Z","slug":"understanding-renders","author":{"name":"Jithya Nanayakkara"},"content":"\n---\n\nThis is the first article in a series covering common techniques for optimizing React's performance by minimizing renders.\n\n1. Part 1 - Understanding Renders (this post)\n2. [Part 2 - Understanding Memoization](https://jithyan.github.io/blog/posts/understanding-memoization)\n3. [Part 3 - Avoiding Memoization](https://jithyan.github.io/blog/posts/avoiding-memoization)\n\n---\n\nIn my experience, React's memoization functions have been a source of confusion for many developers - either being criminally overused in the name of \"performance\", or woefully underutilized.\n\nIn this blog post, I'm going to attempt to dispel the uncertainty of when to use these functions, understand their trade-offs, and introduce you to ways of avoiding them altogether.\n\nSo what is [Memoization](https://en.wikipedia.org/wiki/Memoization)? It's a technique where the result of an expensive computation is cached to improve performance on subsequent calls to it. It's a tradeoff that consumes more memory to save on execution time.\n\nIn React, its memoization functions are primarily used to:\n\n1. Avoid needless re-renders of a component (using `React.memo`) or re-execution of expensive logic (`useMemo`).\n2. Provide a stable reference for objects (both `useMemo` and `useCallback`).\n\nDevs tend to focus on the first point - where some [overuse those functions](https://royi-codes.vercel.app/thousand-usecallbacks/) in the name of \"performance\". But point number 2 is an important use case for React's functional components, especially when writing libraries, and is often overlooked.\n\nTo really understand in which circumstances we make use of them, I need to cover the basics of how React works - apologies to those who are already familiar with this, but it's useful that everyone is on the same page with the terminology used here.\n\n## An overview of React\n\n> For simplicity, I'm going to pretend React classes don't exist.\n\nReact provides us with a component based [abstraction](https://computersciencewiki.org/index.php/Abstraction) for easily updating the DOM in response to state changes. This is done by representing the DOM with a **Virtual DOM** (V-DOM), that is nothing more than a lightweight representation of the actual DOM. In other words, it is just a collection of simple Javascript objects used to represent the actual DOM.\n\nThe idea behind this is that since updates to the actual DOM are expensive operations, we could instead make frequent updates to the V-DOM, and then figure out which of the actual DOM elements need to be updated by diffing the old and new state of the V-DOM. This process is called [reconcilliation](https://reactjs.org/docs/reconciliation.html) and is fast but does not aim to be very accurate - just good enough to minimize unecessary DOM updates for most practical use cases.\n\nWith that out of the way, time for some terminology:\n\n- A React **Element** is a simple Javascript object that represents a node in the V-DOM.\n- A React **Component** is a function that accepts some _props_ and returns React Elements.\n\nThis is what a React **element** looks like, and you can get this by just console logging the output of a component:\n\n![Initial](/blog/assets/blog/reducing-re-renders/react-elements-object.png)\n\n- A **render** is when the React Component (i.e. the function) is executed.\n- A **commit** is when React actually updates a DOM element.\n\nNote the difference between `render` and `commit`. Many developers confuse the two, but they are _not_ the same. When a component \"renders\", it does not necessarily mean the DOM is going to be updated - React may have figured out that nothing has changed after a state update, and skip updating portions of the DOM.\n\nTo really drive home this point, **React components can render many, many times**. These are just basic functions being executed after all - and in most cases, they execute fast with minimal impact on performance. It's objects like the one pictured above that get updated every render - based on how they change, React will decide which DOM elements to update.\n\n## Understanding what happens in a render\n\nHere are some possible reasons a component would re-render (this list is not exhaustive):\n\n1. The component's parent has re-rendered.\n2. The component's state changed (i.e. `setState` was called).\n3. The component is a subscriber to a React Context - every time the Context value changes, the component will re-render.\n\nUnderstanding why your component has re-rendered is a critical first step in diagnosing React performance problems.\nSo see if you can identify what would cause the example component below to re-render:\n\n```jsx\nfunction Counter() {\n  const [counter, setCounter] = useState(0);\n  const user = useContext(UserContext);\n\n  // A callback to increment the counter, passed to FancyButton\n  const incrementer = () => {\n    setCounter((prev) => prev + 1);\n  };\n\n  // An object that is the prop to FancyButton\n  // I'm aware this is a little unusual, but there are situations where\n  // you pass in complex objects as props to a component.\n  const buttonConfig = {\n    name: \"hello\",\n    display: counter,\n  };\n\n  return (\n    <div>\n      <h3>My Special Counter</h3>\n      <p>Hello, {user}!</p>\n      <FancyButton config={buttonConfig} onClick={incrementer} />\n    </div>\n  );\n}\n```\n\nThe following are triggers that would cause `Counter` to re-render:\n\n1. The _parent_ of `Counter` is re-rendered.\n2. `setCounter` is called via the `incrementer` callback (and it's called with a _different_ value - React has an optimization where if the new value to `setState` is the same as the old, a re-render will not happen).\n3. The object returned by `useContext` has changed.\n\nEvery time one of the above triggers are set off, React will execute the `Counter` function again, and return the child elements.\nThese child elements, written as JSX, are nothing more than functions too - they are compiled into `React.createElement(args)` function calls.\nThe reason why we use JSX is that it provides a nice familiar [declarative](https://en.wikipedia.org/wiki/Declarative_programming) abstraction like HTML to write components - just imagine writing a page as a bunch of nested function calls!\n\nBelow is an example of what React code (pre-v17.0) would transform to (taken from the [Babel React Transform Plugin docs](https://babeljs.io/docs/en/babel-plugin-transform-react-jsx)):\n\n```javascript\nconst profile = React.createElement(\n  \"div\",\n  null,\n  React.createElement(\"img\", { src: \"avatar.png\", className: \"profile\" }),\n  React.createElement(\"h3\", null, [user.firstName, user.lastName].join(\" \"))\n);\n```\n\nSo continuing with our example, with each re-render of `Counter`, the following will happen:\n\n1. `incrementer` will be assigned to a _new_ callback **object**. Remember functions in Javascript are objects too!\n2. `buttonConfig` will also be assigned to a new object. Remember that `{} !== {}`. So both `incrementer` and `buttonConfig` will be assigned to **new references** in memory on _every render_.\n3. All the React Elements returned from `Counter` will be _recreated_.\n\nNow let's discuss performance. Given what we know from above, would repeated renders of `Counter` impact performance by constantly re-allocating memory for variables and running all those functions again? Not really.\n\nThese operations are quite cheap, and the Javascript runtime is optimized for doing these operations efficiently. But this could be a problem if you have an app with hundreds or thousands of components re-rendering frequently (and of course, it depends on the user's hardware).\n\nSo do we wrap everything we can with `memo`, `useMemo` and `useCallback`? Some people do, which is probably why you see a lot of blog posts saying to avoid abusing React's memo functions for optimizing performance - it's because the act of memoization trades off time for space. We cache prior values and return them instead of executing functions again.\n\nBut there's a small cost with this. And the cost could be significant if we end up not using the cached values much, and end up frequently caching a value, throwing it away because it's stale, and then creating a new one.\n\n**Since it's easy to shoot yourself in the foot and use these incorrectly, premature optimization should be avoided.**\n\nHowever as long as you understand how React works, choosing when to use the memoization functions is pretty straightforward. And in my experience, you don't need to use them too often.\n\nNow that we've covered why a component can re-render, and how variables are given new references on each render, we can dive into optimization - which we will do in my [next article](https://jithyan.github.io/blog/posts/understanding-memoization).\n"},"estimatedReadingTime":{"minutes":5,"words":1384,"text":"5 min read"}},"__N_SSG":true}